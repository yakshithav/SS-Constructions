"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandRunner = void 0;
const child_process_1 = require("child_process");
/**
 *
 */
class CommandRunner {
    /**
     * Run a command with arguments.
     *
     * @param {string} cmd to execute
     * @param {string[]} args to pass to the command
     * @param {SpawnOptionsWithoutStdio} [opts] options to pass to the command
     * @param {Logger} [logger] optional logger to capture command output
     * @returns {*}  {(Promise<any | void>)}
     * @memberof CommandRunner
     */
    run(cmd, args = [], opts = {}, logger) {
        if (logger) {
            logger.debug(`Running command: ${cmd} ${args.join(' ')}`);
        }
        return new Promise((resolve, reject) => {
            const stack = [];
            const spawnOpts = process.platform === 'win32' ? { ...opts, shell: true } : opts;
            const spawnedCmd = (0, child_process_1.spawn)(cmd, args, spawnOpts);
            spawnedCmd.stdout.setEncoding('utf8');
            let response;
            spawnedCmd.stdout.on('data', (data) => {
                logger?.info(data.toString().replace(/[\r\n]$/, '')); // remove trailing newline as another is added by the logger
                response = data.toString();
            });
            spawnedCmd.stderr.on('data', (data) => {
                logger?.info(data.toString().replace(/[\r\n]$/, '')); // remove trailing newline as another is added by the logger
                stack.push(data.toString());
            });
            spawnedCmd.on('error', (error) => {
                const cmdFailedMsg = `Command failed with error: ${error.message}`;
                logger?.error(cmdFailedMsg);
                reject(error);
            });
            spawnedCmd.on('close', (errorCode) => {
                if (errorCode !== 0) {
                    const cmdFailedMsg = `Command failed, \`${cmd} ${args.join(' ')}\`, ${stack.join(', ')}`;
                    logger?.debug(cmdFailedMsg);
                    reject(cmdFailedMsg);
                }
                resolve(response);
            });
        });
    }
}
exports.CommandRunner = CommandRunner;
//# sourceMappingURL=commandRunner.js.map