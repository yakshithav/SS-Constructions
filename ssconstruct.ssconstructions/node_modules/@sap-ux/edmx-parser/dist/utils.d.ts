/**
 * Given an object that is either an array or a single element, make sure the output it always wrapped as an array.
 *
 * @param sourceObject an object or an array
 * @returns either the original array or the same element wrapped in an arrays
 */
import type { AnnotationList, RawAction, RawActionImport, RawAssociation, RawAssociationSet, RawComplexType, RawEntityContainer, RawEntitySet, RawEntityType, RawMetadata, RawSchema, RawSingleton, RawTypeDefinition, Reference } from '@sap-ux/vocabularies-types';
/**
 * Either returns the sourceObject or the sourceObject wrapped in an array.
 *
 * @param sourceObject the object you want to check
 * @returns the source object wrapped in an array.
 */
export declare function ensureArray<T>(sourceObject: T | T[] | undefined): T[];
/**
 *
 */
export declare class RawMetadataInstance implements RawMetadata {
    references: Reference[];
    schema: RawSchema;
    version: string;
    identification: string;
    /**
     * @param fileIdentification the name of the file you are parsing, mostly for reference
     * @param version the version of the metadata currently evaluated
     * @param schema the parsed schema
     * @param references a list of all the references currently used in your file
     */
    constructor(fileIdentification: string, version: string, schema: RawSchema, references: Reference[]);
}
/**
 *
 */
export declare class MergedRawMetadata implements RawMetadataInstance {
    get references(): Reference[];
    get schema(): RawSchema;
    version: string;
    identification: string;
    _references: Reference[];
    _namespace: string;
    _parserOutput: RawMetadata[];
    _annotations: {
        [id: string]: AnnotationList[];
    };
    _associations: RawAssociation[];
    _associationSets: RawAssociationSet[];
    _entitySets: RawEntitySet[];
    _singletons: RawSingleton[];
    _actions: RawAction[];
    _actionImports: RawActionImport[];
    _entityContainer: RawEntityContainer;
    _entityTypes: RawEntityType[];
    _complexTypes: RawComplexType[];
    _typeDefinitions: RawTypeDefinition[];
    /**
     * @param initialParserOutput
     */
    constructor(initialParserOutput: RawMetadata);
    /**
     * @param parserOutput
     */
    addParserOutput(parserOutput: RawMetadata): void;
}
//# sourceMappingURL=utils.d.ts.map