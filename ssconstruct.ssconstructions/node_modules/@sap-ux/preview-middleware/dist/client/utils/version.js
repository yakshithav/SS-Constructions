'use strict';
sap.ui.define([
    'sap/ui/VersionInfo',
    'sap/base/Log',
    './info-center-message',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common'
], function (VersionInfo, Log, ___info_center_message, ___sap_ux_private_control_property_editor_common) {
    'use strict';
    const sendInfoCenterMessage = ___info_center_message['sendInfoCenterMessage'];
    const MessageBarType = ___sap_ux_private_control_property_editor_common['MessageBarType'];
    const minVersionInfo = {
        major: 1,
        minor: 71
    };
    function checkVersionInfo(versionInfo) {
        if (isNaN(versionInfo.major) || isNaN(versionInfo.minor) || isNaN(versionInfo.patch ?? 0)) {
            void sendInfoCenterMessage({
                title: { key: 'FLP_UI_VERSION_RETRIEVAL_FAILURE_TITLE' },
                description: { key: 'FLP_UI_INVALID_UI5_VERSION_DESCRIPTION' },
                type: MessageBarType.error
            });
            throw new Error('Invalid version info');
        }
    }
    async function getUi5Version() {
        let library = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'sap.ui.core';
        let version = (await VersionInfo.load({ library }))?.version;
        if (!version) {
            Log.error('Could not get UI5 version of application. Using version: 1.130.0 as fallback.');
            version = '1.130.0';
            await sendInfoCenterMessage({
                title: { key: 'FLP_UI_VERSION_RETRIEVAL_FAILURE_TITLE' },
                description: {
                    key: 'FLP_UI_VERSION_RETRIEVAL_FAILURE_DESCRIPTION',
                    params: [version]
                },
                type: MessageBarType.error
            });
        }
        const [major, minor, patch] = version.split('.').map(versionPart => parseInt(versionPart, 10));
        const label = version.split(/-(.*)/s)?.[1];
        return {
            major,
            minor,
            patch,
            label
        };
    }
    function isLowerThanMinimalUi5Version(ui5VersionInfo) {
        let minUi5VersionInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minVersionInfo;
        checkVersionInfo(ui5VersionInfo);
        checkVersionInfo(minUi5VersionInfo);
        return ui5VersionInfo.major < minUi5VersionInfo.major || ui5VersionInfo.major === minUi5VersionInfo.major && ui5VersionInfo.minor < minUi5VersionInfo.minor || ui5VersionInfo.major === minUi5VersionInfo.major && ui5VersionInfo.minor === minUi5VersionInfo.minor && (ui5VersionInfo?.patch ?? 0) < (minUi5VersionInfo?.patch ?? 0);
    }
    function isVersionEqualOrHasNewerPatch(ui5VersionInfo) {
        let targetUi5VersionInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minVersionInfo;
        checkVersionInfo(ui5VersionInfo);
        checkVersionInfo(targetUi5VersionInfo);
        return ui5VersionInfo.major === targetUi5VersionInfo.major && ui5VersionInfo.minor === targetUi5VersionInfo.minor && (ui5VersionInfo?.patch ?? 0) >= (targetUi5VersionInfo?.patch ?? 0);
    }
    function getFullyQualifiedUi5Version(ui5VersionInfo) {
        return `${ ui5VersionInfo.major }.${ ui5VersionInfo.minor }`;
    }
    var __exports = { __esModule: true };
    __exports.minVersionInfo = minVersionInfo;
    __exports.getUi5Version = getUi5Version;
    __exports.isLowerThanMinimalUi5Version = isLowerThanMinimalUi5Version;
    __exports.isVersionEqualOrHasNewerPatch = isVersionEqualOrHasNewerPatch;
    __exports.getFullyQualifiedUi5Version = getFullyQualifiedUi5Version;
    return __exports;
});