'use strict';
sap.ui.define([
    './utils',
    'sap/base/Log',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../utils/info-center-message',
    '../utils/error'
], function (___utils, Log, ___sap_ux_private_control_property_editor_common, ___utils_info_center_message, ___utils_error) {
    'use strict';
    const getLibrary = ___utils['getLibrary'];
    const MessageBarType = ___sap_ux_private_control_property_editor_common['MessageBarType'];
    const sendInfoCenterMessage = ___utils_info_center_message['sendInfoCenterMessage'];
    const FetchError = ___utils_error['FetchError'];
    async function getUi5ApiDtMetadata(libName) {
        const libUrl = '/test-resources/' + libName.split('.').join('/') + '/designtime/api.json';
        const response = await fetch(libUrl);
        if (!response.ok) {
            throw new FetchError(response);
        }
        return response.json();
    }
    const ui5ApiDtMetadata = new Map();
    function loadDefaultLibraries() {
        const allData = Promise.all([
            getUi5ApiDtMetadata('sap.m'),
            getUi5ApiDtMetadata('sap.ui.comp'),
            getUi5ApiDtMetadata('sap.ui.core'),
            getUi5ApiDtMetadata('sap.f')
        ]);
        allData.then(res => {
            res.forEach(api => {
                if (api.library) {
                    ui5ApiDtMetadata.set(api.library, api);
                }
            });
        }).catch(reason => {
            Log.error('Loading Library Failed: ' + reason);
        });
    }
    function formatHtmlText(sHtml) {
        const parts = (sHtml || '').split('<');
        let result = '';
        for (const part of parts) {
            if (!result) {
                result = part;
            } else {
                const indexClosingBracket = part.indexOf('>');
                result += indexClosingBracket >= 0 ? part.substring(indexClosingBracket + 1) : `<${ part }`;
            }
        }
        return result;
    }
    function parseControlMetaModel(controlLibMetadata, controlName) {
        const controlInfo = {
            baseType: '',
            doc: '',
            properties: {}
        };
        const selectedControlMetadata = (controlLibMetadata.symbols ?? []).find(control => control.name === controlName);
        if (selectedControlMetadata) {
            controlInfo.baseType = selectedControlMetadata.extends;
            controlInfo.doc = selectedControlMetadata.description ?? '';
            const properties = selectedControlMetadata['ui5-metadata'].properties;
            if (properties) {
                properties.forEach(prop => {
                    prop.description = formatHtmlText(prop.description || '');
                    prop.propertyName = prop.name;
                    prop.propertyType = prop.type;
                    if (prop.defaultValue === null || prop.defaultValue === '') {
                        prop.defaultValue = '-';
                    }
                    controlInfo.properties[prop.name] = { ...prop };
                });
            }
        }
        return controlInfo;
    }
    async function getControlMetadata(controlName, contLibName) {
        let result;
        let controlLibMetadata = ui5ApiDtMetadata.get(contLibName);
        if (controlLibMetadata) {
            result = parseControlMetaModel(controlLibMetadata, controlName);
        } else {
            controlLibMetadata = await getUi5ApiDtMetadata(contLibName);
            ui5ApiDtMetadata.set(contLibName, controlLibMetadata);
            result = parseControlMetaModel(controlLibMetadata, controlName);
        }
        return result;
    }
    async function getControlPropertyDocumentation(controlName, contLibName) {
        const doc = await getControlMetadata(controlName, contLibName);
        if (doc) {
            const baseControlType = doc.baseType;
            if (baseControlType) {
                const baseContLibName = await getLibrary(baseControlType);
                if (baseContLibName) {
                    const baseControlProps = await getControlPropertyDocumentation(baseControlType, baseContLibName);
                    return {
                        ...baseControlProps,
                        ...doc.properties
                    };
                }
            }
            return { ...doc.properties };
        } else {
            return undefined;
        }
    }
    async function getDocumentation(controlName, contLibName) {
        let doc;
        try {
            doc = await getControlPropertyDocumentation(controlName, contLibName);
        } catch (error) {
            Log.error(`Error in getting documentation for ${ contLibName }`);
            if (error instanceof FetchError && error.status === 404) {
                return undefined;
            }
            await sendInfoCenterMessage({
                title: { key: 'DOCUMENTATION_ERROR_TITLE' },
                description: {
                    key: 'DOCUMENTATION_ERROR_DESCRIPTION',
                    params: [contLibName]
                },
                type: MessageBarType.error
            });
        }
        return doc;
    }
    var __exports = { __esModule: true };
    __exports.getUi5ApiDtMetadata = getUi5ApiDtMetadata;
    __exports.loadDefaultLibraries = loadDefaultLibraries;
    __exports.getDocumentation = getDocumentation;
    return __exports;
});