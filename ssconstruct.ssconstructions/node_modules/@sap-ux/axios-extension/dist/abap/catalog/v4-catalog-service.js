"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V4CatalogService = void 0;
const base_1 = require("./base");
const odata_service_1 = require("../../base/odata-service");
const odata_request_error_1 = require("../../base/odata-request-error");
const logger_1 = require("@sap-ux/logger");
const V4_RECOMMENDED_ENTITYSET = 'RecommendedServices';
const V4_CLASSIC_ENTITYSET = 'Services';
/**
 * OData V4 specific implmentation of SAP's catalog service
 */
class V4CatalogService extends base_1.CatalogService {
    logger = new logger_1.ToolsLogger();
    static PATH = '/sap/opu/odata4/iwfnd/config/default/iwfnd/catalog/0002';
    /**
     * Map the V4 service information to a version independent structure.
     *
     * @param groups v4 service groups
     * @param entitySet entity set used for service selection. e.g. `RecommendedServices`
     * @param dedup if true, duplicate services will be removed based on their id. Duplicate services may appear in multiple groups, e.g. '/IWBEP/ALL'.
     * @returns version independent information
     */
    mapServices(groups, entitySet, dedup = false) {
        const services = [];
        // Duplicates can appear in multiple groups, e.g. '/IWBEP/ALL'
        const uniqueServiceIds = new Set();
        groups
            .filter((group) => group?.DefaultSystem?.[entitySet]?.length > 0)
            .forEach((group) => {
            services.push(...group.DefaultSystem[entitySet].flatMap((service) => {
                if (dedup) {
                    if (uniqueServiceIds.has(service.ServiceId)) {
                        return [];
                    }
                    uniqueServiceIds.add(service.ServiceId);
                }
                return {
                    id: service.ServiceId,
                    group: group.GroupId,
                    path: service.ServiceUrl.split('?').shift(),
                    name: `${group.GroupId} > ${service.ServiceAlias || service.ServiceId}`,
                    serviceVersion: service.ServiceVersion,
                    odataVersion: odata_service_1.ODataVersion.v4,
                    serviceType: service.ServiceType
                };
            }));
        });
        return services;
    }
    /**
     * Fetch all services from the backend using the @nexlink parameter to fetch all pages serially.
     *
     * @returns version independent service information
     */
    async fetchServicesNextLink() {
        if (this.entitySet === undefined) {
            const metadata = await this.metadata();
            this.entitySet = metadata.includes('Name="RecommendedServices"')
                ? V4_RECOMMENDED_ENTITYSET
                : V4_CLASSIC_ENTITYSET;
        }
        const params = new URLSearchParams([
            ['$count', 'true'],
            ['$expand', `DefaultSystem($expand=${this.entitySet})`]
        ]);
        const response = await this.get('/ServiceGroups', { params }, true);
        let serviceGroupResponseOdata = response.odata();
        const serviceGroups = serviceGroupResponseOdata.value;
        let numPageRequests = 1;
        // Page by using the backends nextLink search parameters for the next request
        while (serviceGroupResponseOdata['@odata.nextLink']) {
            const nextLink = new URL(serviceGroupResponseOdata['@odata.nextLink'], this.defaults.baseURL);
            serviceGroupResponseOdata = (await this.get('/ServiceGroups', { params: nextLink.searchParams }, true)).odata();
            numPageRequests++;
            serviceGroups.push(...serviceGroupResponseOdata.value);
        }
        this.logger.log(`Fetched ${serviceGroups.length} service groups in ${numPageRequests} requests.`);
        // check if the service responded with an odata error
        if (odata_request_error_1.ODataRequestError.containsError(serviceGroups)) {
            throw new odata_request_error_1.ODataRequestError(serviceGroups);
        }
        return this.mapServices(serviceGroups, this.entitySet);
    }
    /**
     * Fetches all services from the catalog.
     *
     * @param useNextLink if true, uses the nextLink parameter to fetch all pages serially, otherwise fetches all pages in parallel.
     * @returns v4 services
     */
    async fetchServices(useNextLink = false) {
        if (useNextLink) {
            return this.fetchServicesNextLink();
        }
        return this.fetchServicesParallel();
    }
    /**
     * Fetches all services from the catalog in parallel. Uses the total service count to fetch all service group pages in parallel
     * to improve performance where larger numbers of services and therefore pages are available.
     *
     * @returns List of unique services
     */
    async fetchServicesParallel() {
        const defaultInitialPageSize = 1000; // default page size for the services, large enough to get the first page and skiptoken to determine max page size
        if (this.entitySet === undefined) {
            const metadata = await this.metadata();
            this.entitySet = metadata.includes('Name="RecommendedServices"')
                ? V4_RECOMMENDED_ENTITYSET
                : V4_CLASSIC_ENTITYSET;
        }
        const params = new URLSearchParams([
            ['$count', 'true'],
            ['$top', defaultInitialPageSize.toString()], // Get the first page of services,
            ['$expand', `DefaultSystem($expand=${this.entitySet})`]
        ]);
        const response = await this.get('/ServiceGroups', { params }, true);
        const serviceGroupResponseOdata = response.odata();
        const serviceGroups = serviceGroupResponseOdata.value;
        const serviceGroupCount = serviceGroupResponseOdata['@odata.count'];
        const pageSize = parseInt(serviceGroupResponseOdata['@odata.nextLink']?.split('skiptoken=')[1], 10);
        let numPageRequests = 1;
        // If we dont have a valid skip token, we assume we have all services in the first page
        if (!isNaN(pageSize)) {
            const numPages = Math.ceil(serviceGroupCount / pageSize);
            // Create an array of promises to fetch all pages in parallel
            const fetchPromises = Array.from({ length: numPages - 1 }, (_, index) => {
                const nextParams = new URLSearchParams([
                    ['$count', 'true'],
                    ['$skip', String((index + 1) * pageSize)],
                    ['$top', pageSize.toString()], // Fetch the next 200 services
                    ['$expand', `DefaultSystem($expand=${this.entitySet})`]
                ]);
                numPageRequests++;
                return this.get('/ServiceGroups', { params: nextParams }, true);
            });
            const pageResults = await Promise.all(fetchPromises); // Fetch all remaining pages in parallel
            pageResults.forEach((pageResponse) => {
                const pageData = pageResponse.odata();
                serviceGroups.push(...pageData.value);
            });
        }
        this.logger.log(`Fetched ${serviceGroups.length} service groups in ${numPageRequests} requests.`);
        // check if the service responded with an odata error
        if (odata_request_error_1.ODataRequestError.containsError(serviceGroups)) {
            throw new odata_request_error_1.ODataRequestError(serviceGroups);
        }
        return this.mapServices(serviceGroups, this.entitySet, true);
    }
    /**
     * For OData v4, all annotations are already included in the metadata and no additional request is required.
     *
     * @returns an empty array
     */
    getAnnotations() {
        return Promise.resolve([]);
    }
    /**
     * For OData v4, no additonal call is required to retrieve the service type.
     *
     * @returns undefined
     */
    getServiceType() {
        return Promise.resolve(undefined);
    }
}
exports.V4CatalogService = V4CatalogService;
//# sourceMappingURL=v4-catalog-service.js.map